// Copyright (c) Xenko contributors (https://xenko.com) and Silicon Studio Corp. (https://www.siliconstudio.co.jp)
// Distributed under the MIT license. See the LICENSE.md file in the project root for more information.

namespace Xenko.Rendering.Images
{
    /// <summary>
    /// A gaussian blur shader
    /// </summary>
    internal shader AmbientOcclusionBlurShader<int BlurCount, float BlurScale, float EdgeSharpness> : ImageEffectShader, Camera
    {
        stage float  BlurDistance;
        stage float  Weights[BlurCount];

        stage float reconstructCSZ(float depth)
        {
            return ZProjection.y / (depth - ZProjection.x);
        }

        stage override float4 Shading()
        {
            const float epsilon = 0.0001;

            // Add center
            float totalWeight = Weights[0];
            float3 sum = Texture0.Sample(LinearSampler, streams.TexCoord).rgb * totalWeight;

            float linearDepth = reconstructCSZ(Texture1.Sample(LinearSampler, streams.TexCoord).x);
            if (linearDepth >= BlurDistance)
            {
                sum /= (totalWeight + epsilon);
                return float4(sum, 1);
            }

            // mirrored samples using bilinear filtering
            [unroll]
            for(int i = 1; i < BlurCount; i++)
            {
                float2 coordBase = float2(i * BlurScale, 0);
                float origweight = 0.3 + Weights[i];

                // Handle all directions
                [unroll]
                for (int j = -1; j <= 1; j += 2)
                {
                    float weight = origweight;
                    float2 coord = streams.TexCoord + coordBase * j;

                    float value = Texture0.Sample(LinearSampler, coord).rgb;

                    float linearDepthOther = reconstructCSZ(Texture1.Sample(LinearSampler, coord).x);
                    weight *= max(0.0, 1.0 - EdgeSharpness * abs(linearDepth - linearDepthOther));

                    sum += value * weight;

                    totalWeight += weight;
                }

                coordBase = float2(0, i * BlurScale);

                [unroll]
                for (int j = -1; j <= 1; j += 2)
                {
                    float weight = origweight;
                    float2 coord = streams.TexCoord + coordBase * j;

                    float value = Texture0.Sample(LinearSampler, coord).rgb;

                    float linearDepthOther = reconstructCSZ(Texture1.Sample(LinearSampler, coord).x);
                    weight *= max(0.0, 1.0 - EdgeSharpness * abs(linearDepth - linearDepthOther));

                    sum += value * weight;

                    totalWeight += weight;
                }
            }

            sum /= (totalWeight + epsilon);
            return float4(sum, 1);
        }
    };
}
