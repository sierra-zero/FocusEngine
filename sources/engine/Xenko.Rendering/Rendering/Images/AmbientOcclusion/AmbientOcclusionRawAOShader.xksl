// Copyright (c) Xenko contributors (https://xenko.com) and Silicon Studio Corp. (https://www.siliconstudio.co.jp)
// Distributed under the MIT license. See the LICENSE.md file in the project root for more information.

namespace Xenko.Rendering.Images
{
    shader AmbientOcclusionRawAOShader <int SamplesCount>  : ImageEffectShader, Camera
    {
        float4   ProjInfo;    // .x = zN * zF, .y = zN - zF, .z = zF
        float4   ScreenInfo;  // .x = Width, .y = Height, .z = Aspect

        float    ParamProjScale = 1;
        float    ParamIntensity = 1;
        float    ParamBias = 0.01f;
        float    ParamRadius = 1;
        float    ParamRadiusSquared = 1;
        float    ParamDistance = 1000;

        stage float reconstructCSZ(float depth)
        {
            return ZProjection.y / (depth - ZProjection.x);
        }

        stage float3 reconstructCSPosition(float2 S, float z)
        {
            return float3((S.xy * ProjInfo.xy + ProjInfo.zw) * z, z);
        }

        stage float3 reconstructCSNormal(float3 position)
        {
            return normalize(cross(ddy(position), ddx(position)));
        }

        stage float sampleAO(float3 viewPosition, float3 viewNormal, float diskRadius, int i, float randomPatternRotationAngle)
        {
            //*****************************
            //  Sample Offset
            float alpha = (i + 0.5) * 0.675f / SamplesCount;
            float angle = 43.9822971503f * alpha + randomPatternRotationAngle;

            float2 offset = float2(cos(angle), sin(angle));
            float ssRadius = alpha * diskRadius;

            //*****************************
            //  Depth
            float2 samplePos = streams.TexCoord + offset * ssRadius;
            int2 samplePosInt = saturate(samplePos) * ScreenInfo.xy;
            
            float depth = Texture0.Load(int3(samplePosInt, 0));
            float linearDepth = reconstructCSZ(depth);

            //*****************************
            // View Position
            float3 position = reconstructCSPosition(samplePosInt, linearDepth);
                   position.x = -position.x;

            //*****************************
            // View Normal
            float3 v = position - viewPosition;
            v.z = -v.z;
            
            //*****************************
            // Ambient Occlusion
            float distSq = dot(v, v);
            float vn = dot(v, viewNormal);

            const float epsilon = 0.01;

            float f = max(ParamRadiusSquared - distSq, 0.0);

            return f * f * f * max((vn - ParamBias) / (epsilon + distSq), 0.0);
        }

        stage override float4 Shading()
        {
            //*****************************
            // Reconstruct View space linear depth Z from the depth buffer
            float depth = Texture0.SampleLevel(Sampler, streams.TexCoord, 0).x;
            float linearDepth = reconstructCSZ(depth);

            float finalStrength = ParamIntensity * (1.0 - linearDepth / ParamDistance);
            if (finalStrength <= 0.0) return float4(1,1,1,1);

            //*****************************
            // Reconstruct View space position XYZ
            float3 viewPosition = reconstructCSPosition(streams.TexCoord.xy * ScreenInfo.xy, linearDepth);
                   viewPosition.x *= -1;

            //*****************************
            // Reconstruct View space normal NxNyNz
            float3 viewNormal = reconstructCSNormal(viewPosition.xyz);
                   viewNormal.xy *= -1;

            float randomPatternRotationAngle = sin(dot(streams.TexCoord,float2(12.9898,78.233))) * 43758.5453;

            //*****************************
            // Choose a sample radius proportional to the projected area of the half-sphere
            float diskRadius = ParamProjScale / linearDepth;

            //*****************************
            // Compute the ambient occlusion
            float sum = 0.0;
            for (int i = 0; i < SamplesCount; i++)
            {
                sum += sampleAO(viewPosition, viewNormal, diskRadius, i, randomPatternRotationAngle);
            }

            float temp = ParamRadiusSquared * ParamRadius;
            sum /= temp * temp;
	        float A = max(0.0, 1.0 - sum * 5 * finalStrength / SamplesCount);
            
            return float4(A, A, A, 1.0);
        }
    };
}
